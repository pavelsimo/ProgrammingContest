#include <algorithm>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <list>
#include <bitset>
#include <deque>
#include <numeric>
#include <iterator>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cctype>
#include <cmath>
#include <climits>
#include <sys/time.h>
#include <regex.h>

using namespace std;

#define DEBUG(x) cout << #x << ": " << x << endl
#define sz(a) int((a).size())
#define all(x) (x).begin(),(x).end()
#define foreach(it,c) for(typeof((c).begin()) it=(c).begin();it!=(c).end();++it)

bool seen[55], can;
int adj[55][55];
int DP[55][55][2], N, parity;

class EvenRoute {
public:

   string isItPossible( vector <int> x, vector <int> y, int wantedParity ) {
      string res = "CANNOT";
      memset(adj, -1, sizeof(adj));
      memset(seen, false, sizeof(seen));
      memset(DP, -1, sizeof(DP));
      x.push_back(0); y.push_back(0);
      N = sz(x);
      swap(x[0],x[N-1]);
      swap(y[0],y[N-1]);
      for(int i = 0; i < N; ++i) {
         printf("(%d,%d)\n",x[i],y[i]);
         for(int j = i + 1; j < N; ++j) {
            int dist = (abs(x[i]-x[j]) + abs(y[i]-y[j])) % 2;
            adj[i][j] = dist;
            adj[j][i] = dist;
         }
      }
      DP[0][0] = 0;
      for(int cur = 0; cur < N; ++cur) {
         for(int nxt = 0; nxt < N; ++nxt) {
                          
         }
      }
      return can ? "CAN": "CANNOT";
   }
};

// BEGIN CUT HERE
namespace moj_harness {
   int run_test_case(int);
   void run_test( int casenum = -1 ) {
      if ( casenum != -1 ) {
         if ( run_test_case( casenum ) == -1 )
            cerr << "Illegal input! Test case " << casenum << " does not exist." << endl;
         return;
      }
      
      int correct = 0, total = 0;
      for ( int i=0;; ++i ) {
         int x = run_test_case(i);
         if ( x == -1 ) {
            if ( i >= 100 ) break;
            continue;
         }
         correct += x;
         ++total;
      }
      
      if ( total == 0 ) {
         cerr << "No test cases run." << endl;
      } else if ( correct < total ) {
         cerr << "Some cases FAILED (passed " << correct << " of " << total << ")." << endl;
      } else {
         cerr << "All " << total << " tests passed!" << endl;
      }
   }
   
   long long get_time() {
#if defined(_SYS_TIME_H_) || defined(_SYS_TIME_H)
      struct timeval tv;
      gettimeofday(&tv, NULL);
      return tv.tv_sec * 1000000LL + tv.tv_usec;
#else
      return 0;
#endif
   }
   int verify_case( int casenum, long long starttime, const string &expected, const string &received ) {
      cerr << "Example " << casenum << "... "; 
      if ( expected == received ) {
         cerr << "PASSED";
#if defined(_SYS_TIME_H_) || defined(_SYS_TIME_H)
         cerr << "  " << (get_time()-starttime)/1000 << "ms";
#endif
         cerr << endl;
         return 1;
      } else {
         cerr << "FAILED";
#if defined(_SYS_TIME_H_) || defined(_SYS_TIME_H)
         cerr << "  " << (get_time()-starttime)/1000 << "ms";
#endif
         cerr << endl;
         cerr << "    Expected: \"" << expected << "\"" << endl; 
         cerr << "    Received: \"" << received << "\"" << endl; 
         return 0;
      }
   }

   int run_test_case( int casenum__ ) {
      long long starttime__ = get_time();
      switch( casenum__ ) {
      case 0: {
         int x[]                   = {-1,-1,1,1};
         int y[]                   = {-1,1,1,-1};
         int wantedParity          = 0;
         string expected__         = "CAN";

         return verify_case( casenum__, starttime__, expected__, EvenRoute().isItPossible( vector <int>( x, x + ( sizeof x / sizeof(int) ) ), vector <int>( y, y + ( sizeof y / sizeof(int) ) ), wantedParity ) );
      }
      case 1: {
         int x[]                   = {-5,-3,2};
         int y[]                   = {2,0,3};
         int wantedParity          = 1;
         string expected__         = "CAN";

         return verify_case( casenum__, starttime__, expected__, EvenRoute().isItPossible( vector <int>( x, x + ( sizeof x / sizeof(int) ) ), vector <int>( y, y + ( sizeof y / sizeof(int) ) ), wantedParity ) );
      }
      case 2: {
         int x[]                   = {1001, -4000};
         int y[]                   = {0,0};
         int wantedParity          = 1;
         string expected__         = "CAN";

         return verify_case( casenum__, starttime__, expected__, EvenRoute().isItPossible( vector <int>( x, x + ( sizeof x / sizeof(int) ) ), vector <int>( y, y + ( sizeof y / sizeof(int) ) ), wantedParity ) );
      }
      case 3: {
         int x[]                   = {11, 21, 0};
         int y[]                   = {-20, 42, 7};
         int wantedParity          = 0;
         string expected__         = "CANNOT";

         return verify_case( casenum__, starttime__, expected__, EvenRoute().isItPossible( vector <int>( x, x + ( sizeof x / sizeof(int) ) ), vector <int>( y, y + ( sizeof y / sizeof(int) ) ), wantedParity ) );
      }
      case 4: {
         int x[]                   = {0, 6};
         int y[]                   = {10, -20};
         int wantedParity          = 1;
         string expected__         = "CANNOT";

         return verify_case( casenum__, starttime__, expected__, EvenRoute().isItPossible( vector <int>( x, x + ( sizeof x / sizeof(int) ) ), vector <int>( y, y + ( sizeof y / sizeof(int) ) ), wantedParity ) );
      }

      // custom cases

/*
      case 5: {
         int x[]                   = ;
         int y[]                   = ;
         int wantedParity          = ;
         string expected__         = ;

         return verify_case( casenum__, starttime__, expected__, EvenRoute().isItPossible( vector <int>( x, x + ( sizeof x / sizeof(int) ) ), vector <int>( y, y + ( sizeof y / sizeof(int) ) ), wantedParity ) );
      }
*/
/*
      case 6: {
         int x[]                   = ;
         int y[]                   = ;
         int wantedParity          = ;
         string expected__         = ;

         return verify_case( casenum__, starttime__, expected__, EvenRoute().isItPossible( vector <int>( x, x + ( sizeof x / sizeof(int) ) ), vector <int>( y, y + ( sizeof y / sizeof(int) ) ), wantedParity ) );
      }
*/
/*
      case 7: {
         int x[]                   = ;
         int y[]                   = ;
         int wantedParity          = ;
         string expected__         = ;

         return verify_case( casenum__, starttime__, expected__, EvenRoute().isItPossible( vector <int>( x, x + ( sizeof x / sizeof(int) ) ), vector <int>( y, y + ( sizeof y / sizeof(int) ) ), wantedParity ) );
      }
*/
      default:
         return -1;
      }
   }
}

// END CUT HERE

// BEGIN CUT HERE
int main(int argc, char *argv[]) {
   if (argc > 1) {
      for (int i = 1; i < argc; ++i)
         moj_harness::run_test(atoi(argv[i]));
   }
   else {
      moj_harness::run_test();
   }
   return 0;
}
// END CUT HERE
